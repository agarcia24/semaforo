/*
 * Semaforo.java
 */
package net.ausiasmarch.semaforo.modelo;

/**
 *
 * @author Adrian Garcia Vicente
 */
public class Semaforo extends javax.swing.JPanel {

    private ColorSemaforo color;
    private Thread hiloCambioColor = null; //Thread es clase HILO DE EJECUCION
    private boolean stop;
    private int duracion;
    private int parpadeos;

    public Semaforo() {
        initComponents();
        duracion = 1500;
        parpadeos = 5;
    
        /*Indicamos el valor inicial al semaforo en color ROJO, para que cuando arranquemos 
         su estado inicial sera ROJO*/
        color = ColorSemaforo.ROJO;
        jLabelRojo.setVisible(true);
        jLabelAmbar.setVisible(false);
        jLabelVerde.setVisible(false);
    }

    /*Creamos tres metodos: uno para cada color del semáforo.
    Establece color ROJO indicando que solo se muestre el jLabelROJO*/
    public void setRojo() {
        color = ColorSemaforo.ROJO;
        jLabelRojo.setVisible(true);
        jLabelAmbar.setVisible(false);
        jLabelVerde.setVisible(false);
    }

    //Establece color AMBAR indicando que solo se muestre el jLabelAMBAR
    public void setAmbar() {
        color = ColorSemaforo.AMBAR;
        jLabelRojo.setVisible(false);
        jLabelAmbar.setVisible(true);
        jLabelVerde.setVisible(false);
    }

    //Establece color VERDE indicando que solo se muestre el jLabelVERDE
    public void setVerde() {
        color = ColorSemaforo.VERDE;
        jLabelRojo.setVisible(false);
        jLabelAmbar.setVisible(false);
        jLabelVerde.setVisible(true);
    }

    //Obtiene el estado del semaforo como el metodo GET
    public ColorSemaforo getEstado() {
        return color;
    }

    /* Creamos un SET APAGADO */
    public void apagado() {
        jLabelRojo.setVisible(false);
        jLabelAmbar.setVisible(false);
        jLabelVerde.setVisible(false);
        jLabelSemaforo.setVisible(true);
    }

    //Añade metodo para que pase de un color a otro con un switch
    public void cambiaColor() {
        switch (color) {
            case ROJO:
                setVerde();
                break;
            case VERDE:
                setAmbar();
                break;
            case AMBAR:
                setRojo();
        }
    }

    /*Tenemos que crear una pausa para "DORMIR" el HILO DE EJECUCION
     */
    private void pausa(int num) {
        try {
            Thread.sleep(num);
        } catch (InterruptedException ex) {
            throw new RuntimeException(ex);
        }
    }

    /* Creamos un metodo PARPADEAR para que parpadee el semaforo*/
    private void parpadea() {
        for (int i = 0; i < parpadeos; i++) {
            if (stop) {
                break;
            }
            apagado();
            if (stop) {
                break;
            }
            pausa(200);
            if (stop) {
                break;
            }
            setAmbar();
            if (stop) {
                break;
            }
            pausa(200);
        }
    }

    /*Metodos GET y SET */
    public int getDuracion() {
        return duracion;
    }

    public void setDuracion(int duracion) {
        this.duracion = duracion;
    }

    public int getParpadeos() {
        return parpadeos;
    }

    public void setParpadeos(int parpadeos) {
        this.parpadeos = parpadeos;
    }

    //Creamos metodo INICIAR que va a tener una clase interna ANONIMA 
    public void iniciar() {
        hiloCambioColor = new Thread() {
            @Override
            public void run() {
                while (!stop) {
                    cambiaColor();
                    pausa(color.getValue() * duracion);
                    if (color == ColorSemaforo.AMBAR) {
                        parpadea();
                    }
                }
            }
        }; 

    //FIN CLASE ANIDADA
        hiloCambioColor.start();
        stop = false;
    }
    
    /* Creamos metodo PARAR que luego enlazará al MAIN*/
    public void parar() {
        stop = true;
        hiloCambioColor = null;
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelRojo = new javax.swing.JLabel();
        jLabelVerde = new javax.swing.JLabel();
        jLabelAmbar = new javax.swing.JLabel();
        jLabelSemaforo = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelRojo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/ausiasmarch/semaforo/img/semaforoRojo.png"))); // NOI18N
        add(jLabelRojo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 180, 460));

        jLabelVerde.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/ausiasmarch/semaforo/img/semaforoVerde.png"))); // NOI18N
        add(jLabelVerde, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 460));

        jLabelAmbar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/ausiasmarch/semaforo/img/semaforoAmbar.png"))); // NOI18N
        add(jLabelAmbar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 180, 460));

        jLabelSemaforo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/ausiasmarch/semaforo/img/semaforoOff.png"))); // NOI18N
        add(jLabelSemaforo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 180, 460));
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelAmbar;
    private javax.swing.JLabel jLabelRojo;
    private javax.swing.JLabel jLabelSemaforo;
    private javax.swing.JLabel jLabelVerde;
    // End of variables declaration//GEN-END:variables
}
